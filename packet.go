// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 3.2.2.2 by WSRD Tencent.
// Generated from `test/packet.jce'
// **********************************************************************

package tarsgo

import (
	"bytes"
)

type RequestPacket struct {
	IVersion     int16             `tag:"1"  required:"true"`
	CPacketType  byte              `tag:"2"  required:"true"`
	IMessageType int32             `tag:"3"  required:"true"`
	IRequestId   int32             `tag:"4"  required:"true"`
	SServantName string            `tag:"5"  required:"true"`
	SFuncName    string            `tag:"6"  required:"true"`
	SBuffer      []byte            `tag:"7"  required:"true"`
	ITimeout     int32             `tag:"8"  required:"true"`
	Context      map[string]string `tag:"9"  required:"true"`
	Status       map[string]string `tag:"10"  required:"true"`
}

func (p *RequestPacket) ClassName() string {
	return "gotars.RequestPacket"
}
func (p *RequestPacket) MD5() string {
	return "c59aebb17bc319a29273b9b713aaa7e5"
}
func (p *RequestPacket) ResetDefautlt() {
	var empty RequestPacket
	*p = empty
}
func (p *RequestPacket) Encode(buf *bytes.Buffer) error {
	var err error
	err = EncodeTagInt16Value(buf, p.IVersion, 1)
	if nil != err {
		return err
	}
	err = EncodeTagByteValue(buf, p.CPacketType, 2)
	if nil != err {
		return err
	}
	err = EncodeTagInt32Value(buf, p.IMessageType, 3)
	if nil != err {
		return err
	}
	err = EncodeTagInt32Value(buf, p.IRequestId, 4)
	if nil != err {
		return err
	}
	err = EncodeTagStringValue(buf, p.SServantName, 5)
	if nil != err {
		return err
	}
	err = EncodeTagStringValue(buf, p.SFuncName, 6)
	if nil != err {
		return err
	}
	err = EncodeTagBytesValue(buf, p.SBuffer, 7)
	if nil != err {
		return err
	}
	err = EncodeTagInt32Value(buf, p.ITimeout, 8)
	if nil != err {
		return err
	}
	err = EncodeTagMapValue(buf, p.Context, 9)
	if nil != err {
		return err
	}
	err = EncodeTagMapValue(buf, p.Status, 10)
	if nil != err {
		return err
	}
	return nil
}
func (p *RequestPacket) Decode(buf *bytes.Buffer) error {
	var err error
	err = DecodeTagInt16Value(buf, &p.IVersion, 1, true)
	if nil != err {
		return err
	}
	err = DecodeTagByteValue(buf, &p.CPacketType, 2, true)
	if nil != err {
		return err
	}
	err = DecodeTagInt32Value(buf, &p.IMessageType, 3, true)
	if nil != err {
		return err
	}
	err = DecodeTagInt32Value(buf, &p.IRequestId, 4, true)
	if nil != err {
		return err
	}
	err = DecodeTagStringValue(buf, &p.SServantName, 5, true)
	if nil != err {
		return err
	}
	err = DecodeTagStringValue(buf, &p.SFuncName, 6, true)
	if nil != err {
		return err
	}
	err = DecodeTagBytesValue(buf, &p.SBuffer, 7, true)
	if nil != err {
		return err
	}
	err = DecodeTagInt32Value(buf, &p.ITimeout, 8, true)
	if nil != err {
		return err
	}
	err = DecodeTagMapValue(buf, &p.Context, 9, true)
	if nil != err {
		return err
	}
	err = DecodeTagMapValue(buf, &p.Status, 10, true)
	if nil != err {
		return err
	}
	return err
}

type ResponsePacket struct {
	IVersion     int16             `tag:"1"  required:"true"`
	CPacketType  byte              `tag:"2"  required:"true"`
	IRequestId   int32             `tag:"3"  required:"true"`
	IMessageType int32             `tag:"4"  required:"true"`
	IRet         int32             `tag:"5"  required:"true"`
	SBuffer      []byte            `tag:"6"  required:"true"`
	Status       map[string]string `tag:"7"  required:"true"`
	SResultDesc  string            `tag:"8"  required:"false"`
	Context      map[string]string `tag:"9"  required:"false"`
}

func (p *ResponsePacket) ClassName() string {
	return "gotars.ResponsePacket"
}
func (p *ResponsePacket) MD5() string {
	return "d3d28337fdb7dcc39992eb69a5405946"
}
func (p *ResponsePacket) ResetDefautlt() {
	var empty ResponsePacket
	*p = empty
}
func (p *ResponsePacket) Encode(buf *bytes.Buffer) error {
	var err error
	err = EncodeTagInt16Value(buf, p.IVersion, 1)
	if nil != err {
		return err
	}
	err = EncodeTagByteValue(buf, p.CPacketType, 2)
	if nil != err {
		return err
	}
	err = EncodeTagInt32Value(buf, p.IRequestId, 3)
	if nil != err {
		return err
	}
	err = EncodeTagInt32Value(buf, p.IMessageType, 4)
	if nil != err {
		return err
	}
	err = EncodeTagInt32Value(buf, p.IRet, 5)
	if nil != err {
		return err
	}
	err = EncodeTagBytesValue(buf, p.SBuffer, 6)
	if nil != err {
		return err
	}
	err = EncodeTagMapValue(buf, p.Status, 7)
	if nil != err {
		return err
	}
	err = EncodeTagStringValue(buf, p.SResultDesc, 8)
	if nil != err {
		return err
	}
	err = EncodeTagMapValue(buf, p.Context, 9)
	if nil != err {
		return err
	}
	return nil
}
func (p *ResponsePacket) Decode(buf *bytes.Buffer) error {
	var err error
	err = DecodeTagInt16Value(buf, &p.IVersion, 1, true)
	if nil != err {
		return err
	}
	err = DecodeTagByteValue(buf, &p.CPacketType, 2, true)
	if nil != err {
		return err
	}
	err = DecodeTagInt32Value(buf, &p.IRequestId, 3, true)
	if nil != err {
		return err
	}
	err = DecodeTagInt32Value(buf, &p.IMessageType, 4, true)
	if nil != err {
		return err
	}
	err = DecodeTagInt32Value(buf, &p.IRet, 5, true)
	if nil != err {
		return err
	}
	err = DecodeTagBytesValue(buf, &p.SBuffer, 6, true)
	if nil != err {
		return err
	}
	err = DecodeTagMapValue(buf, &p.Status, 7, true)
	if nil != err {
		return err
	}
	err = DecodeTagStringValue(buf, &p.SResultDesc, 8, false)
	if nil != err {
		return err
	}
	err = DecodeTagMapValue(buf, &p.Context, 9, false)
	if nil != err {
		return err
	}
	return err
}
